/*
 * Created Date: Saturday September 2nd 2023
 * Author: Lilith
 * -----
 * Last Modified: Saturday September 2nd 2023 10:17:35 pm
 * Modified By: Lilith (definitelynotagirl115169@gmail.com)
 * -----
 * Copyright (c) 2023-2023 DefinitelyNotAGirl@github
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#pragma once

#include <Memory>

namespace std:
    template<typename T>
    export iteratable class stack:
        va-global private u64 stackInstances;
        vi-global private u64 stackVariantInstances;

        private u64 size = 0;
        /** 
            @desc 0: new elements go to stack[size-1], 1: new elements go to stack[0] 
        */
        private bool direction = 0;
        private T* data;

        public inline T& latest():
            if(this->direction == 0):
                return this->data[this->size-1];
            else:
                return this->data[0];
                
        public T& operator[](u64 index);
        
        public void push(T& obj):
            if(this->direction == 0):
                this->data = realloc(this->data,sizeof(T)*(this->size+1));
                memcpy(this->data+(sizeof(T)*this->size),obj,sizeof(T));
            else:
                T* dataOld = this->data;
                this->data = malloc(sizeof(T)*(this->size+1));
                memcpy(this->data+sizeof(T),dataOld,this->size*sizeof(T))
                memcpy(this->data,obj,sizeof(T));
            
            this->size++;

        /**
            @desc pop the latest element off the stack
        */
        public void pop();

        /**
            @desc pushes obj onto the stack
        */
        public void operator<<(T& obj);

        /**
            @desc pops the latest element off the stack and writes it into obj
        */
        public void operator>>(T& obj):
            obj = this->latest;
